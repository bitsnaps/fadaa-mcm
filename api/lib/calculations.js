/**
 * Calculates the revenue generated by all contracts during a period of an investment
 * @param {object} contracts - Contracts signed by the client
 * @param {object} investment - the investment made by investors
 * @returns {number}
 */
const calculateContractRevenue = (contracts, investment) => {
  let totalContractRevenue = 0;

  for (const contract of contracts) {
    const { start_date, end_date, monthly_rate } = contract;
    const investmentStart = new Date(investment.starting_date);
    const investmentEnd = new Date(investment.ending_date);
    const contractStart = new Date(start_date);

    // If the contract started before the investment, it should not be included.
    if (contractStart < investmentStart) {
      continue;
    }

    let current = new Date(start_date);
    while (current < new Date(end_date)) {
      const monthStart = new Date(current.getFullYear(), current.getMonth(), 1);
      const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0);

      if (monthStart <= investmentEnd && monthEnd >= investmentStart) {
        totalContractRevenue += parseFloat(monthly_rate);
      }

      current.setMonth(current.getMonth() + 1);
    }
  }

  return totalContractRevenue;
};


/**
 * Calculates the total revenue from client services based on specified criteria.
 *
 * @param {object} clientServices - The ClientServices object model
 * @param {boolean} [options.withTaxes=false] - Whether to include company-borne taxes in the revenue.
 * @returns {number} The calculated total services revenue.
 */
async function calculateServiceRevenue({ clientServices, withTaxes = false }) {
    let totalRevenue = 0;
    clientServices.forEach(service => {
        let serviceRevenue = parseFloat(service.price) || 0;
        if (withTaxes && service.Tax && service.Tax.bearer === 'Company') {
            const taxAmount = serviceRevenue * (parseFloat(service.Tax.rate) / 100);
            serviceRevenue -= taxAmount; // Subtracting company-borne tax from price
        }
        totalRevenue += serviceRevenue;
    });

    return totalRevenue;
}

module.exports = {
  calculateContractRevenue,
  calculateServiceRevenue
};