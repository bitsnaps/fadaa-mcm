const { Op } = require('sequelize');
const models = require('../models');

/**
 * Calculates the total revenue from client services based on specified criteria.
 *
 * @param {object} options - The options for calculation.
 * @param {Date} [options.startDate] - The start date of the period.
 * @param {Date} [options.endDate] - The end date of the period.
 * @param {number} [options.profile_id] - The ID of the profile to filter by.
 * @param {boolean} [options.withTaxes=false] - Whether to include company-borne taxes in the revenue.
 * @returns {Promise<number>} The calculated total services revenue.
 */
async function calculateServiceRevenue({ startDate, endDate, profile_id, withTaxes = false }) {
    const where = {};
    if (startDate && endDate) {
        where.transaction_date = { [Op.between]: [startDate, endDate] };
    }
    if (profile_id) {
        where.profile_id = profile_id;
    }

    const clientServices = await models.ClientService.findAll({
        where,
        include: [{ model: models.Tax, attributes: ['rate', 'bearer'] }]
    });

    let totalRevenue = 0;
    clientServices.forEach(service => {
        let serviceRevenue = parseFloat(service.price) || 0;
        if (withTaxes && service.Tax && service.Tax.bearer === 'Company') {
            const taxAmount = serviceRevenue * (parseFloat(service.Tax.rate) / 100);
            serviceRevenue -= taxAmount; // Subtracting company-borne tax from price
        }
        totalRevenue += serviceRevenue;
    });

    return totalRevenue;
}

/**
 * Calculates the revenue generated by all contracts during a period of an investment
 * @param {object} contracts - Contracts signed by the client
 * @param {object} investment - the investment made by investors
 * @returns {number}
 */
const calculateContractRevenue = (contracts, investment) => {
  let totalContractRevenue = 0;

  for (const contract of contracts) {
    const { start_date, end_date, monthly_rate } = contract;
    const investmentStart = new Date(investment.starting_date);
    const investmentEnd = new Date(investment.ending_date);

    let current = new Date(start_date);
    while (current <= new Date(end_date)) {
      const monthStart = new Date(current.getFullYear(), current.getMonth(), 1);
      const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0);

      if (monthStart <= investmentEnd && monthEnd >= investmentStart) {
        totalContractRevenue += parseFloat(monthly_rate);
      }

      current.setMonth(current.getMonth() + 1);
    }
    console.log('totalContractRevenue = ', totalContractRevenue, `from: ${start_date}, to: ${end_date}, monthly_rate: ${monthly_rate}`);
  }

  return totalContractRevenue;
};

module.exports = {
  calculateServiceRevenue,
  calculateContractRevenue
};